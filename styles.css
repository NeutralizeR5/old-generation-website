const CACHE_NAME = 'oldgeneration-v2';
const ASSETS = [
  '/',
  '/index.html',
  '/styles.css',
  '/manifest.json',
  '/scripts.js',
  '/icons/apple-touch-icon.png',
  '/icons/favicon-32x32.png',
  '/icons/favicon-16x16.png',
  '/icons/mstile-150x150.png',
  '/images/logo.webp',         // WebP olarak güncelledim
  '/images/og-image.webp',
  '/images/telegram.webp',
  '/images/line.webp',
  '/videos/shortfilm.mp4',
  '/videos/captions.vtt'
];

// Install event: öncelikle cache oluştur ve kaynakları ekle
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => cache.addAll(ASSETS))
      .then(() => self.skipWaiting())
  );
});

// Activate event: eski cache'leri temizle
self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(keys =>
      Promise.all(
        keys.filter(key => key !== CACHE_NAME)
            .map(key => caches.delete(key))
      )
    ).then(() => self.clients.claim())
  );
});

// Fetch event: cache'den cevap ver veya ağdan çek ve cache'e ekle (API istekleri hariç)
self.addEventListener('fetch', event => {
  const request = event.request;

  // API isteklerini cachelemiyoruz
  if (request.url.includes('/api/')) {
    event.respondWith(fetch(request).catch(() => {
      // API hata durumunda uygun fallback yapılabilir
      return new Response(JSON.stringify({ error: 'Offline or API error' }), {
        status: 503,
        headers: { 'Content-Type': 'application/json' }
      });
    }));
    return;
  }

  event.respondWith(
    caches.match(request).then(cachedResponse => {
      if (cachedResponse) {
        return cachedResponse;
      }

      return fetch(request).then(networkResponse => {
        // Başarılı yanıtları cache'e ekle
        if (!networkResponse || !networkResponse.ok) {
          return networkResponse;
        }

        return caches.open(CACHE_NAME).then(cache => {
          cache.put(request, networkResponse.clone());
          return networkResponse;
        });
      });
    }).catch(() => {
      // Offline durumunda HTML isteği için fallback
      if (request.headers.get('accept')?.includes('text/html')) {
        return caches.match('/');
      }
    })
  );
});
